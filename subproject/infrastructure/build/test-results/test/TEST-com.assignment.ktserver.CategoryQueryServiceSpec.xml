<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="com.assignment.ktserver.CategoryQueryServiceSpec" tests="13" skipped="0" failures="0" errors="0" timestamp="2023-02-05T07:16:29" hostname="BingBong-EX-MAC-2.local" time="0.387">
  <properties/>
  <testcase name="카테고리 쿼리 서비스를 조회하면 카테고리가 반환" classname="com.assignment.ktserver.CategoryQueryServiceSpec" time="0.253"/>
  <testcase name="카테고리 쿼리 서비스에서 찾지 못했다면 null 이 반환" classname="com.assignment.ktserver.CategoryQueryServiceSpec" time="0.004"/>
  <testcase name="모든 카테고리를 조회" classname="com.assignment.ktserver.CategoryQueryServiceSpec" time="0.005"/>
  <testcase name="카테고리가 없으면 빈 리스트가 반환." classname="com.assignment.ktserver.CategoryQueryServiceSpec" time="0.004"/>
  <testcase name="카테고리를 생성한다면 Entity 를 반환" classname="com.assignment.ktserver.CategoryQueryServiceSpec" time="0.029"/>
  <testcase name="이름 변경 성공시 변경된 row 가 반환" classname="com.assignment.ktserver.CategoryQueryServiceSpec" time="0.013"/>
  <testcase name="존재하지 않는 카테고리는 업데이트 하지 않고 DoesNotExist 으로 응답" classname="com.assignment.ktserver.CategoryQueryServiceSpec" time="0.011"/>
  <testcase name="삭제에 성공하면 Unit 이 반환" classname="com.assignment.ktserver.CategoryQueryServiceSpec" time="0.006"/>
  <testcase name="존재하지 않는 카테고리는 삭제 하지 않고 DoesNotExist 으로 응답" classname="com.assignment.ktserver.CategoryQueryServiceSpec" time="0.005"/>
  <testcase name="부모 등록 성공시 Unit 이 반환" classname="com.assignment.ktserver.CategoryQueryServiceSpec" time="0.007"/>
  <testcase name="본인이나 자식 카테고리는 부모로 등록할 수 없고, NotAllowCircularReference 으로 응답" classname="com.assignment.ktserver.CategoryQueryServiceSpec" time="0.008"/>
  <testcase name="부모가 존재하지 않는 카테고리는 업데이트 하지 않고 DoesNotExist 으로 응답" classname="com.assignment.ktserver.CategoryQueryServiceSpec" time="0.007"/>
  <testcase name="자식이 존재하지 않는 카테고리는 업데이트 하지 않고 DoesNotExist 으로 응답" classname="com.assignment.ktserver.CategoryQueryServiceSpec" time="0.006"/>
  <system-out><![CDATA[16:16:28.836 [Test worker @coroutine#2] DEBUG io.mockk.impl.instantiation.AbstractMockFactory - Creating mockk for CategoryRepository name=#1
16:16:29.351 [pool-1-thread-1 @coroutine#3] DEBUG io.mockk.impl.instantiation.AbstractMockFactory - Creating mockk for List name=child of #1#2
16:16:29.356 [pool-1-thread-1 @coroutine#3] DEBUG io.mockk.impl.recording.states.AnsweringState - Answering [CategoryEntity(id=kdJSKVlKoXHynllfGWKo4qdksBvht7fn, parentId=omNivCoKbK3va43mSFI28huK1tgaMKS0, name=RMRSUti5dPJkieG9xD5X7OyjRaGvNfSs)] on CategoryRepository(#1).findWithChild(kdJSKVlKoXHynllfGWKo4qdksBvht7fn, continuation {})
16:16:29.381 [pool-1-thread-1 @coroutine#3] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [CategoryRepository(#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
16:16:29.388 [pool-1-thread-1 @coroutine#3] DEBUG io.mockk.impl.instantiation.AbstractMockFactory - Creating mockk for List name=child of #1#3
16:16:29.389 [pool-1-thread-1 @coroutine#3] DEBUG io.mockk.impl.recording.states.AnsweringState - Answering [] on CategoryRepository(#1).findWithChild(BM3dSSvH3xMi0tDNNFZHOyjjHOUVVRBd, continuation {})
16:16:29.391 [pool-1-thread-1 @coroutine#3] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [CategoryRepository(#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
16:16:29.391 [pool-1-thread-1 @coroutine#3] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [CategoryRepository(#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
16:16:29.396 [pool-1-thread-1 @coroutine#12] DEBUG io.mockk.impl.instantiation.AbstractMockFactory - Creating mockk for List name=child of #1#4
16:16:29.397 [pool-1-thread-1 @coroutine#12] DEBUG io.mockk.impl.recording.states.AnsweringState - Answering [CategoryEntity(id=o97aJorFKBigNLF1KV3psdxRmQMk9WVK, parentId=null, name=WQ2Mx0Mmkv3gE6NLaMFCWIHTbgmqf5pX), CategoryEntity(id=AlhtAZSrKO9FgclZ22WoVOwrFKiDnquI, parentId=o97aJorFKBigNLF1KV3psdxRmQMk9WVK, name=IlNWusaizYx5QgFi3ju3QcVaJtdcNVCL)] on CategoryRepository(#1).findWithChild(null, continuation {})
16:16:29.399 [pool-1-thread-1 @coroutine#12] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [CategoryRepository(#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
16:16:29.402 [pool-1-thread-1 @coroutine#12] DEBUG io.mockk.impl.instantiation.AbstractMockFactory - Creating mockk for List name=child of #1#5
16:16:29.403 [pool-1-thread-1 @coroutine#12] DEBUG io.mockk.impl.recording.states.AnsweringState - Answering [] on CategoryRepository(#1).findWithChild(null, continuation {})
16:16:29.404 [pool-1-thread-1 @coroutine#12] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [CategoryRepository(#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
16:16:29.405 [pool-1-thread-1 @coroutine#12] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [CategoryRepository(#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
16:16:29.434 [pool-1-thread-1 @coroutine#21] DEBUG io.mockk.impl.instantiation.AbstractMockFactory - Creating mockk for CategoryEntity name=child of #1#6
16:16:29.434 [pool-1-thread-1 @coroutine#21] DEBUG io.mockk.impl.recording.states.AnsweringState - Answering CategoryEntity(id=SHCrzcvB2mXUdPJM6IGaOI0AmiWaRh1s, parentId=0GRPY4tBfbsg8vq6xa9q4Dp4ENhqHvls, name=oqG2H5TTQ7FfBxC2mt4xQpeR0SAVCsRd) on CategoryRepository(#1).create(oqG2H5TTQ7FfBxC2mt4xQpeR0SAVCsRd, continuation {})
16:16:29.436 [pool-1-thread-1 @coroutine#21] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [CategoryRepository(#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
16:16:29.437 [pool-1-thread-1 @coroutine#21] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [CategoryRepository(#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
16:16:29.443 [pool-1-thread-1 @coroutine#26] DEBUG io.mockk.impl.instantiation.AbstractMockFactory - Creating mockk for CategoryEntity name=child of #1#7
16:16:29.449 [pool-1-thread-1 @coroutine#26] DEBUG io.mockk.impl.recording.states.AnsweringState - Answering CategoryEntity(id=B6OqUZ5QZRRULHBr77CGqICWJEZm6v4i, parentId=1Tl7zDyLPTgmFvhHKtqcM7LLxOSJj4wI, name=NqbA846P8e1ThyLJ3LeDu7fbQqZGCJdy) on CategoryRepository(#1).find(gBpPSqj8MRrMqAnuIuikwQJV6DzqhDoW, continuation {})
16:16:29.450 [pool-1-thread-1 @coroutine#26] DEBUG io.mockk.impl.recording.states.AnsweringState - Answering 123 on CategoryRepository(#1).update(gBpPSqj8MRrMqAnuIuikwQJV6DzqhDoW, Wj3AMYA3U2mYq1RFz4Otk646XtsP7OjL, continuation {})
16:16:29.453 [pool-1-thread-1 @coroutine#26] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [CategoryRepository(#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
16:16:29.456 [pool-1-thread-1 @coroutine#26] DEBUG io.mockk.impl.instantiation.AbstractMockFactory - Creating mockk for CategoryEntity name=child of #1#8
16:16:29.460 [pool-1-thread-1 @coroutine#26] DEBUG io.mockk.impl.recording.states.AnsweringState - Throwing java.lang.Exception on CategoryRepository(#1).find(gBpPSqj8MRrMqAnuIuikwQJV6DzqhDoW, continuation {})
16:16:29.465 [pool-1-thread-1 @coroutine#26] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [CategoryRepository(#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
16:16:29.466 [pool-1-thread-1 @coroutine#26] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [CategoryRepository(#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
16:16:29.470 [pool-1-thread-1 @coroutine#41] DEBUG io.mockk.impl.instantiation.AbstractMockFactory - Creating mockk for List name=child of #1#9
16:16:29.473 [pool-1-thread-1 @coroutine#41] DEBUG io.mockk.impl.recording.states.AnsweringState - Answering [CategoryEntity(id=eu9AMRYKUXkIOvRBzHk4nQvzKCN1pRmD, parentId=null, name=EyzTVYLIRSuc6RC6imYLsrP5JfOyKSb7), CategoryEntity(id=aOn5xTxYHGWuNNnAXUGk8RFD8vQIZsDH, parentId=eu9AMRYKUXkIOvRBzHk4nQvzKCN1pRmD, name=JZQVIT6lTk017toBsOLYGU7noiuVqJTL)] on CategoryRepository(#1).findWithChild(eu9AMRYKUXkIOvRBzHk4nQvzKCN1pRmD, continuation {})
16:16:29.474 [pool-1-thread-1 @coroutine#41] DEBUG io.mockk.impl.recording.states.AnsweringState - Answering 123 on CategoryRepository(#1).deleteAll([eu9AMRYKUXkIOvRBzHk4nQvzKCN1pRmD, aOn5xTxYHGWuNNnAXUGk8RFD8vQIZsDH], continuation {})
16:16:29.475 [pool-1-thread-1 @coroutine#41] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [CategoryRepository(#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
16:16:29.478 [pool-1-thread-1 @coroutine#41] DEBUG io.mockk.impl.instantiation.AbstractMockFactory - Creating mockk for List name=child of #1#10
16:16:29.479 [pool-1-thread-1 @coroutine#41] DEBUG io.mockk.impl.recording.states.AnsweringState - Answering [] on CategoryRepository(#1).findWithChild(eu9AMRYKUXkIOvRBzHk4nQvzKCN1pRmD, continuation {})
16:16:29.482 [pool-1-thread-1 @coroutine#41] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [CategoryRepository(#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
16:16:29.482 [pool-1-thread-1 @coroutine#41] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [CategoryRepository(#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
16:16:29.487 [pool-1-thread-1 @coroutine#56] DEBUG io.mockk.impl.instantiation.AbstractMockFactory - Creating mockk for CategoryEntity name=child of #1#11
16:16:29.488 [pool-1-thread-1 @coroutine#56] DEBUG io.mockk.impl.instantiation.AbstractMockFactory - Creating mockk for List name=child of #1#12
16:16:29.491 [pool-1-thread-1 @coroutine#56] DEBUG io.mockk.impl.recording.states.AnsweringState - Answering CategoryEntity(id=WN9nciD4kqffigRz3jGibbnXyQy5tB4Q, parentId=QXPc4yPKVYZYNZ7XaYWC3muj0Sow8tIi, name=L6dF643fgZtqyOZoPW8K1J3Yif3IaPxw) on CategoryRepository(#1).find(Q9BB1L4b4tAMqkTmLtbHeooIt4T9TC8h, continuation {})
16:16:29.491 [pool-1-thread-1 @coroutine#56] DEBUG io.mockk.impl.recording.states.AnsweringState - Answering [CategoryEntity(id=QXPc4yPKVYZYNZ7XaYWC3muj0Sow8tIi, parentId=null, name=unj0qoZn7LXleoVYNGQGALaJr49d5eRO)] on CategoryRepository(#1).findWithChild(8jRB72HIFpK0oEEdNAtZMT7RXn8YO89d, continuation {})
16:16:29.491 [pool-1-thread-1 @coroutine#56] DEBUG io.mockk.impl.recording.states.AnsweringState - Answering 123 on CategoryRepository(#1).updateRelationship(Q9BB1L4b4tAMqkTmLtbHeooIt4T9TC8h, 8jRB72HIFpK0oEEdNAtZMT7RXn8YO89d, continuation {})
16:16:29.492 [pool-1-thread-1 @coroutine#56] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [CategoryRepository(#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
16:16:29.495 [pool-1-thread-1 @coroutine#56] DEBUG io.mockk.impl.instantiation.AbstractMockFactory - Creating mockk for CategoryEntity name=child of #1#13
16:16:29.496 [pool-1-thread-1 @coroutine#56] DEBUG io.mockk.impl.instantiation.AbstractMockFactory - Creating mockk for List name=child of #1#14
16:16:29.497 [pool-1-thread-1 @coroutine#56] DEBUG io.mockk.impl.recording.states.AnsweringState - Answering CategoryEntity(id=WN9nciD4kqffigRz3jGibbnXyQy5tB4Q, parentId=QXPc4yPKVYZYNZ7XaYWC3muj0Sow8tIi, name=L6dF643fgZtqyOZoPW8K1J3Yif3IaPxw) on CategoryRepository(#1).find(WN9nciD4kqffigRz3jGibbnXyQy5tB4Q, continuation {})
16:16:29.497 [pool-1-thread-1 @coroutine#56] DEBUG io.mockk.impl.recording.states.AnsweringState - Answering [CategoryEntity(id=QXPc4yPKVYZYNZ7XaYWC3muj0Sow8tIi, parentId=null, name=unj0qoZn7LXleoVYNGQGALaJr49d5eRO), CategoryEntity(id=WN9nciD4kqffigRz3jGibbnXyQy5tB4Q, parentId=QXPc4yPKVYZYNZ7XaYWC3muj0Sow8tIi, name=L6dF643fgZtqyOZoPW8K1J3Yif3IaPxw)] on CategoryRepository(#1).findWithChild(QXPc4yPKVYZYNZ7XaYWC3muj0Sow8tIi, continuation {})
16:16:29.501 [pool-1-thread-1 @coroutine#56] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [CategoryRepository(#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
16:16:29.504 [pool-1-thread-1 @coroutine#56] DEBUG io.mockk.impl.instantiation.AbstractMockFactory - Creating mockk for CategoryEntity name=child of #1#15
16:16:29.505 [pool-1-thread-1 @coroutine#56] DEBUG io.mockk.impl.recording.states.AnsweringState - Throwing java.lang.Exception on CategoryRepository(#1).find(Q9BB1L4b4tAMqkTmLtbHeooIt4T9TC8h, continuation {})
16:16:29.508 [pool-1-thread-1 @coroutine#56] DEBUG io.mockk.impl.instantiation.AbstractMockFactory - Creating mockk for List name=child of #1#16
16:16:29.510 [pool-1-thread-1 @coroutine#56] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [CategoryRepository(#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
16:16:29.513 [pool-1-thread-1 @coroutine#56] DEBUG io.mockk.impl.instantiation.AbstractMockFactory - Creating mockk for CategoryEntity name=child of #1#17
16:16:29.514 [pool-1-thread-1 @coroutine#56] DEBUG io.mockk.impl.instantiation.AbstractMockFactory - Creating mockk for List name=child of #1#18
16:16:29.515 [pool-1-thread-1 @coroutine#56] DEBUG io.mockk.impl.recording.states.AnsweringState - Answering CategoryEntity(id=WN9nciD4kqffigRz3jGibbnXyQy5tB4Q, parentId=QXPc4yPKVYZYNZ7XaYWC3muj0Sow8tIi, name=L6dF643fgZtqyOZoPW8K1J3Yif3IaPxw) on CategoryRepository(#1).find(Q9BB1L4b4tAMqkTmLtbHeooIt4T9TC8h, continuation {})
16:16:29.515 [pool-1-thread-1 @coroutine#56] DEBUG io.mockk.impl.recording.states.AnsweringState - Answering [] on CategoryRepository(#1).findWithChild(8jRB72HIFpK0oEEdNAtZMT7RXn8YO89d, continuation {})
16:16:29.518 [pool-1-thread-1 @coroutine#56] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [CategoryRepository(#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
16:16:29.518 [pool-1-thread-1 @coroutine#56] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [CategoryRepository(#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
