<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="com.assignment.ktserver.CategoryServiceSpec" tests="14" skipped="0" failures="0" errors="0" timestamp="2023-02-05T07:16:21" hostname="BingBong-EX-MAC-2.local" time="0.331">
  <properties/>
  <testcase name="카테고리 조회 성공시 카테고리 반환" classname="com.assignment.ktserver.CategoryServiceSpec" time="0.23"/>
  <testcase name="카테고리를 찾지 못했다면 null 반환." classname="com.assignment.ktserver.CategoryServiceSpec" time="0.004"/>
  <testcase name="모든 카테고리를 조회" classname="com.assignment.ktserver.CategoryServiceSpec" time="0.006"/>
  <testcase name="카테고리가 없으면 빈 리스트 반환." classname="com.assignment.ktserver.CategoryServiceSpec" time="0.003"/>
  <testcase name="카테고리를 생성한다면 Entity 반환" classname="com.assignment.ktserver.CategoryServiceSpec" time="0.02"/>
  <testcase name="이름이 유효하지 않으면 InvalidName 에러가 발생하고, create 가 호출되지 않음" classname="com.assignment.ktserver.CategoryServiceSpec" time="0.006"/>
  <testcase name="이름 변경 성공시 Unit 이 반환" classname="com.assignment.ktserver.CategoryServiceSpec" time="0.005"/>
  <testcase name="이름이 유효하지 않으면 InvalidName 에러가 발생하고, updete 가 호출되지 않음" classname="com.assignment.ktserver.CategoryServiceSpec" time="0.004"/>
  <testcase name="존재하지 않는 카테고리는 업데이트 하지 않음 DoesNotExist 으로 응답" classname="com.assignment.ktserver.CategoryServiceSpec" time="0.003"/>
  <testcase name="삭제에 성공하면 Unit 이 반환" classname="com.assignment.ktserver.CategoryServiceSpec" time="0.004"/>
  <testcase name="존재하지 않는 카테고리는 삭제 하지 않고 DoesNotExist 으로 응답" classname="com.assignment.ktserver.CategoryServiceSpec" time="0.004"/>
  <testcase name="부모 등록 성공시 Unit 이 반환" classname="com.assignment.ktserver.CategoryServiceSpec" time="0.003"/>
  <testcase name="본인이나 자식 카테고리는 부모로 등록할 수 없고, NotAllowCircularReference 으로 응답" classname="com.assignment.ktserver.CategoryServiceSpec" time="0.005"/>
  <testcase name="존재하지 않는 카테고리는 업데이트 하지 않고 DoesNotExist 으로 응답" classname="com.assignment.ktserver.CategoryServiceSpec" time="0.004"/>
  <system-out><![CDATA[16:16:21.604 [Test worker @coroutine#2] DEBUG io.mockk.impl.instantiation.AbstractMockFactory - Creating mockk for CategoryQueryService name=#1
16:16:22.076 [pool-1-thread-1 @coroutine#4] DEBUG io.mockk.impl.instantiation.AbstractMockFactory - Creating mockk for Either name=child of #1#2
16:16:22.084 [pool-1-thread-1 @coroutine#4] DEBUG io.mockk.impl.recording.states.AnsweringState - Answering Either.Right(Category(id=lI80Olt7PagK8TlO0Oj6yfyVLx09tqmE, parentId=null, name=63jU6LMyxrGH6lvpNUa8RRy2T2zShIAM, subCategories=[Category(id=FS2k7vmPbwaq7MYBUhsE4OWaNkTIlrRM, parentId=iHhlrwy8wlk4nSi3tkOyqtXqMGYIK58B, name=dvUiOn0FITg6LDQP9ACJ3LXE57tAifPo, subCategories=[])])) on CategoryQueryService(#1).get(lI80Olt7PagK8TlO0Oj6yfyVLx09tqmE, continuation {})
16:16:22.097 [pool-1-thread-1 @coroutine#4] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [CategoryQueryService(#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
16:16:22.104 [pool-1-thread-1 @coroutine#4] DEBUG io.mockk.impl.instantiation.AbstractMockFactory - Creating mockk for Either name=child of #1#3
16:16:22.104 [pool-1-thread-1 @coroutine#4] DEBUG io.mockk.impl.recording.states.AnsweringState - Answering Either.Right(null) on CategoryQueryService(#1).get(lI80Olt7PagK8TlO0Oj6yfyVLx09tqmE, continuation {})
16:16:22.106 [pool-1-thread-1 @coroutine#4] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [CategoryQueryService(#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
16:16:22.106 [pool-1-thread-1 @coroutine#4] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [CategoryQueryService(#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
16:16:22.112 [pool-1-thread-1 @coroutine#13] DEBUG io.mockk.impl.instantiation.AbstractMockFactory - Creating mockk for Either name=child of #1#4
16:16:22.113 [pool-1-thread-1 @coroutine#13] DEBUG io.mockk.impl.recording.states.AnsweringState - Answering Either.Right([Category(id=I0CaySEy2Utz2MIm4ylm1e80lxIJewtR, parentId=null, name=PBhNMghKZvedfIXKjD60Nqe7f1ff0iFx, subCategories=[Category(id=2RweO76uCgmWAfoSA071X53Zw45TfPJW, parentId=aQEF9X7xMlZz1ffggCXskZQbtD84VH4I, name=hPUlqva2kjcvdxDmDIVcNlxZcTCzV998, subCategories=[])])]) on CategoryQueryService(#1).getAll(continuation {})
16:16:22.115 [pool-1-thread-1 @coroutine#13] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [CategoryQueryService(#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
16:16:22.118 [pool-1-thread-1 @coroutine#13] DEBUG io.mockk.impl.instantiation.AbstractMockFactory - Creating mockk for Either name=child of #1#5
16:16:22.119 [pool-1-thread-1 @coroutine#13] DEBUG io.mockk.impl.recording.states.AnsweringState - Answering Either.Right([]) on CategoryQueryService(#1).getAll(continuation {})
16:16:22.120 [pool-1-thread-1 @coroutine#13] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [CategoryQueryService(#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
16:16:22.120 [pool-1-thread-1 @coroutine#13] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [CategoryQueryService(#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
16:16:22.142 [pool-1-thread-1 @coroutine#22] DEBUG io.mockk.impl.instantiation.AbstractMockFactory - Creating mockk for CategoryEntity name=child of #1#6
16:16:22.143 [pool-1-thread-1 @coroutine#22] DEBUG io.mockk.impl.recording.states.AnsweringState - Answering CategoryEntity(id=wMXcACICZUSg7LAe65LwC1ivHfzrsWql, parentId=yeyG0me1TzIDUwxpbPBMwihtDz1dojNT, name=VwFcA3LQpfm2mq6Mw3VWx5CszF5Xnv4U) on CategoryQueryService(#1).create(VwFcA3LQpfm2mq6Mw3VWx5CszF5Xnv4U, continuation {})
16:16:22.144 [pool-1-thread-1 @coroutine#22] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [CategoryQueryService(#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
16:16:22.151 [pool-1-thread-1 @coroutine#22] DEBUG io.mockk.impl.instantiation.AbstractMockFactory - Creating mockk for CategoryEntity name=child of #1#7
16:16:22.151 [pool-1-thread-1 @coroutine#22] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [CategoryQueryService(#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
16:16:22.152 [pool-1-thread-1 @coroutine#22] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [CategoryQueryService(#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
16:16:22.157 [pool-1-thread-1 @coroutine#29] DEBUG io.mockk.impl.instantiation.AbstractMockFactory - Creating mockk for Either name=child of #1#8
16:16:22.158 [pool-1-thread-1 @coroutine#29] DEBUG io.mockk.impl.recording.states.AnsweringState - Answering Either.Right(kotlin.Unit) on CategoryQueryService(#1).update(I6p7QRcUHKDa89ijkIl0hTve6xmw0WXH, 6MWj84eBKThHpJJiP3N4eXSw7nOBtqcd, continuation {})
16:16:22.160 [pool-1-thread-1 @coroutine#29] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [CategoryQueryService(#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
16:16:22.163 [pool-1-thread-1 @coroutine#29] DEBUG io.mockk.impl.instantiation.AbstractMockFactory - Creating mockk for Either name=child of #1#9
16:16:22.165 [pool-1-thread-1 @coroutine#29] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [CategoryQueryService(#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
16:16:22.168 [pool-1-thread-1 @coroutine#29] DEBUG io.mockk.impl.instantiation.AbstractMockFactory - Creating mockk for Either name=child of #1#10
16:16:22.169 [pool-1-thread-1 @coroutine#29] DEBUG io.mockk.impl.recording.states.AnsweringState - Answering Either.Left(DoesNotExist(id=I6p7QRcUHKDa89ijkIl0hTve6xmw0WXH)) on CategoryQueryService(#1).update(I6p7QRcUHKDa89ijkIl0hTve6xmw0WXH, 6MWj84eBKThHpJJiP3N4eXSw7nOBtqcd, continuation {})
16:16:22.170 [pool-1-thread-1 @coroutine#29] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [CategoryQueryService(#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
16:16:22.170 [pool-1-thread-1 @coroutine#29] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [CategoryQueryService(#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
16:16:22.175 [pool-1-thread-1 @coroutine#42] DEBUG io.mockk.impl.instantiation.AbstractMockFactory - Creating mockk for Either name=child of #1#11
16:16:22.176 [pool-1-thread-1 @coroutine#42] DEBUG io.mockk.impl.recording.states.AnsweringState - Answering Either.Right(kotlin.Unit) on CategoryQueryService(#1).deleteAll(r99qlV3sb9V7Fu4rxVEdA9qFYXSVirR3, continuation {})
16:16:22.177 [pool-1-thread-1 @coroutine#42] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [CategoryQueryService(#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
16:16:22.180 [pool-1-thread-1 @coroutine#42] DEBUG io.mockk.impl.instantiation.AbstractMockFactory - Creating mockk for Either name=child of #1#12
16:16:22.181 [pool-1-thread-1 @coroutine#42] DEBUG io.mockk.impl.recording.states.AnsweringState - Answering Either.Left(DoesNotExist(id=r99qlV3sb9V7Fu4rxVEdA9qFYXSVirR3)) on CategoryQueryService(#1).deleteAll(r99qlV3sb9V7Fu4rxVEdA9qFYXSVirR3, continuation {})
16:16:22.183 [pool-1-thread-1 @coroutine#42] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [CategoryQueryService(#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
16:16:22.183 [pool-1-thread-1 @coroutine#42] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [CategoryQueryService(#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
16:16:22.187 [pool-1-thread-1 @coroutine#51] DEBUG io.mockk.impl.instantiation.AbstractMockFactory - Creating mockk for Either name=child of #1#13
16:16:22.188 [pool-1-thread-1 @coroutine#51] DEBUG io.mockk.impl.recording.states.AnsweringState - Answering Either.Right(kotlin.Unit) on CategoryQueryService(#1).connectRelationship(T05ukpGWPwljGogfqpSFRHNVYAehFCNO, YYb5AMfvtnUrzScOX5mE99OxQYeix4Uj, continuation {})
16:16:22.189 [pool-1-thread-1 @coroutine#51] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [CategoryQueryService(#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
16:16:22.192 [pool-1-thread-1 @coroutine#51] DEBUG io.mockk.impl.instantiation.AbstractMockFactory - Creating mockk for Either name=child of #1#14
16:16:22.193 [pool-1-thread-1 @coroutine#51] DEBUG io.mockk.impl.recording.states.AnsweringState - Answering Either.Left(NotAllowCircularReference(reason=)) on CategoryQueryService(#1).connectRelationship(T05ukpGWPwljGogfqpSFRHNVYAehFCNO, YYb5AMfvtnUrzScOX5mE99OxQYeix4Uj, continuation {})
16:16:22.195 [pool-1-thread-1 @coroutine#51] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [CategoryQueryService(#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
16:16:22.198 [pool-1-thread-1 @coroutine#51] DEBUG io.mockk.impl.instantiation.AbstractMockFactory - Creating mockk for Either name=child of #1#15
16:16:22.199 [pool-1-thread-1 @coroutine#51] DEBUG io.mockk.impl.recording.states.AnsweringState - Answering Either.Left(DoesNotExist(id=YYb5AMfvtnUrzScOX5mE99OxQYeix4Uj)) on CategoryQueryService(#1).connectRelationship(T05ukpGWPwljGogfqpSFRHNVYAehFCNO, YYb5AMfvtnUrzScOX5mE99OxQYeix4Uj, continuation {})
16:16:22.200 [pool-1-thread-1 @coroutine#51] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [CategoryQueryService(#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
16:16:22.201 [pool-1-thread-1 @coroutine#51] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [CategoryQueryService(#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
